// This file would normally be generated by the gRPC compiler.
// A simplified placeholder version is provided here.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// AuthServiceClient is the client API for AuthService service.
type AuthServiceClient interface {
	// Registration
	CreateRegistration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ResendCodeEmail(ctx context.Context, in *ResendCodeEmailRequest, opts ...grpc.CallOption) (*CodeResponse, error)

	// Login
	SendLoginCodeEmail(ctx context.Context, in *SendLoginCodeEmailRequest, opts ...grpc.CallOption) (*CodeResponse, error)
	ConfirmLogin(ctx context.Context, in *ConfirmLoginRequest, opts ...grpc.CallOption) (*TokenResponse, error)

	// Token
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	// Registration
	CreateRegistration(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	ConfirmEmail(context.Context, *ConfirmEmailRequest) (*EmptyResponse, error)
	ResendCodeEmail(context.Context, *ResendCodeEmailRequest) (*CodeResponse, error)

	// Login
	SendLoginCodeEmail(context.Context, *SendLoginCodeEmailRequest) (*CodeResponse, error)
	ConfirmLogin(context.Context, *ConfirmLoginRequest) (*TokenResponse, error)

	// Token
	RefreshToken(context.Context, *RefreshTokenRequest) (*TokenResponse, error)
	ValidateToken(context.Context, *ValidateTokenRequest) (*UserResponse, error)
}

// UnimplementedAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (s *UnimplementedAuthServiceServer) CreateRegistration(ctx context.Context, req *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistration not implemented")
}

func (s *UnimplementedAuthServiceServer) ConfirmEmail(ctx context.Context, req *ConfirmEmailRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEmail not implemented")
}

func (s *UnimplementedAuthServiceServer) ResendCodeEmail(ctx context.Context, req *ResendCodeEmailRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendCodeEmail not implemented")
}

func (s *UnimplementedAuthServiceServer) SendLoginCodeEmail(ctx context.Context, req *SendLoginCodeEmailRequest) (*CodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLoginCodeEmail not implemented")
}

func (s *UnimplementedAuthServiceServer) ConfirmLogin(ctx context.Context, req *ConfirmLoginRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmLogin not implemented")
}

func (s *UnimplementedAuthServiceServer) RefreshToken(ctx context.Context, req *RefreshTokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}

func (s *UnimplementedAuthServiceServer) ValidateToken(ctx context.Context, req *ValidateTokenRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}

// RegisterAuthServiceServer registers the server with the given gRPC server.
func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegistration",
			Handler: func(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RegistrationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil {
					return srv.(AuthServiceServer).CreateRegistration(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/auth.AuthService/CreateRegistration",
				}
				handler := func(ctx context.Context, req interface{}) (interface{}, error) {
					return srv.(AuthServiceServer).CreateRegistration(ctx, req.(*RegistrationRequest))
				}
				return interceptor(ctx, in, info, handler)
			},
		},
		// Other methods would be defined similarly
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/auth.proto",
}
